//  Copyright (C) 2014 Michael J. Keith, University of Manchester
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <algorithm>
#include <inttypes.h>
#include <cxxpgplot.h>
#include <TKlog.h>
#include "debug.h"

// include header generated by makeheaders
#include "PsrthymePlotter.hpp"

#if INTERFACE
#include <string>
#include <vector>
class PsrthymePlotter {
   private: 
	  std::vector<std::string> devices;
   public:
	  PsrthymePlotter(std::string dev) {
		 this->devices.push_back(dev);
	  }
	  void addDevice(std::string dev){
		 this->devices.push_back(dev);
	  }
	  void clearDevices(){
		 this->devices.clear();
	  }
	  void plot(PsrthymeResult::Ptr result);
}

#endif


void PsrthymePlotter::plot(PsrthymeResult::Ptr result){

   double chisq_min = result->chisq_space->get(result->chisq_space->min())/double(result->nfree);
   PgPlot pgplot;
   pgplot.createGrid(3,1);
   pgplot.setRowHeight(0,0.2);
   pgplot.setRowHeight(1,0.15);
   pgplot.setRowHeight(2,0.6);

   // Lower plot, it's the pulse profile
   PgPlotPane::Ptr mainPlot = pgplot.getPane(2,0);
   mainPlot->set_xlim(-0.5,0.5);

   PgPlotData::Ptr profile = PgPlotData::blank();
   mainPlot->datasets.push_back(profile);
   profile->x = result->obsn->phase;
   profile->y = result->obsn->profile;

   PgPlotData::Ptr tmpl = PgPlotData::blank();
   tmpl->x = result->obsn->phase;
   tmpl->y = result->best_profile;
   mainPlot->datasets.push_back(tmpl);

   PgPlotData::Ptr resid = PgPlotData::blank();
   resid->x = result->obsn->phase;
   resid->y = result->residual;
   mainPlot->datasets.push_back(resid);
   mainPlot->xlab="Phase";
   mainPlot->ylab="Amplitude";

   // med plot, the chisq.
   PgPlotPane::Ptr midPlot = pgplot.getPane(1,0);
   midPlot->set_xlim(-0.5,0.5);
   midPlot->draw_xlab=false;
   midPlot->ylab="Chisq";

   PgPlotData::Ptr chisq = PgPlotData::blank();
   chisq->x.resize(result->chisq_space->size());
   chisq->y.resize(result->chisq_space->size());
   result->chisq_space->toArray(arr(chisq->x), arr(chisq->y));

   for(uint64_t i=0; i < chisq->y.size(); i++){
	  chisq->y[i] /= double(result->nfree);
   }

   midPlot->datasets.push_back(chisq);

   PgPlotData::Ptr cov = PgPlotData::blank();
   cov->x = result->obsn->phase;
   cov->y = result->data_cov;
   double cov_min = *std::min_element(cov->y.begin(),cov->y.end());
   double cov_max = *std::max_element(cov->y.begin(),cov->y.end());
   for(uint64_t i=0; i < cov->y.size(); i++){
	  cov->y[i] = (cov->y[i] - cov_min)/(cov_max-cov_min);
	  cov->y[i] *= chisq_min*5;
   }


   midPlot->datasets.push_back(cov);



   // top plot, the zoomed chisq.
   PgPlotPane::Ptr topPlot = pgplot.getPane(0,0);
   topPlot->ylab="Chisq";

   PgPlotData::Ptr chizoom = PgPlotData::blank();
   chizoom->x.resize(result->chisq_space->size());
   chizoom->y.resize(result->chisq_space->size());
   result->chisq_space->toArray(arr(chizoom->x), arr(chizoom->y),result->phase);
   result->error=0.009/5.0;
   uint64_t first=1;
   uint64_t last=chizoom->x.size()-1;
   double prev = -10;
   for(uint64_t i=0; i < chizoom->x.size(); i++){
	  chizoom->y[i] /= double(result->nfree);
	  chizoom->x[i]-=result->phase;
	  if(chizoom->x[i] > 0.5)chizoom->x[i]-=1.0;
	  if(chizoom->x[i] <= -0.5)chizoom->x[i]+=1.0;
	  if(chizoom->x[i] < -0.4 && chizoom->x[i] < prev)chizoom->x[i]+=1;
	  prev=chizoom->x[i];
	  if((chizoom->x[i]/result->error) < -5.0){
		 first = i;
	  }
	  if((chizoom->x[i]/result->error) <= 5.0){
		 last = i;
	  }
	  //logmsg("first/last: %ld %ld %lf",first,last,chizoom->x[i]);
   }
   chizoom->x.erase(chizoom->x.begin()+last, chizoom->x.end());
   chizoom->x.erase(chizoom->x.begin(), chizoom->x.begin()+first);

   chizoom->y.erase(chizoom->y.begin()+last, chizoom->y.end());
   chizoom->y.erase(chizoom->y.begin(), chizoom->y.begin()+first);
   topPlot->datasets.push_back(chizoom);


   //colours and stuff
   profile->setPlotType(PgPlotData::HIST);
   profile->lineColorIndex=PgPlot::BLUE;

   tmpl->setPlotType(PgPlotData::HIST);
   tmpl->lineColorIndex=PgPlot::GREEN;

   resid->setPlotType(PgPlotData::HIST);
   resid->lineColorIndex=PgPlot::RED;

   chisq->setPlotType(PgPlotData::LINE);
   chisq->lineColorIndex=PgPlot::RED;

   cov->setPlotType(PgPlotData::LINE);
   cov->lineColorIndex=PgPlot::BLUE;

   logmsg("%lg chisq_min",chisq_min);
   midPlot->set_ylim(0,chisq_min*5);

   topPlot->title="XX";
   chizoom->setPlotType(PgPlotData::LINE);
   chizoom->addPlotType(PgPlotData::POINT);
   chizoom->pointType=PgPlot::CIRCLE1;
   chizoom->lineColorIndex=PgPlot::RED;
   chizoom->pointColorIndex=PgPlot::ORANGE;
   topPlot->set_ylim(0,chisq_min*3);

   logmsg("nplot %ld",result->chisq_space->size());

   for (std::vector<std::string>::iterator it=this->devices.begin(); it!=this->devices.end(); ++it){
	  pgplot.show(*it);
   }
}

