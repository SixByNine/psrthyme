//  Copyright (C) 2014 Michael J. Keith, University of Manchester
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <inttypes.h>
#include <boost/lexical_cast.hpp>

// include header generated by makeheaders
#include "PsrthymeProfile.hpp"

#if INTERFACE
#include <vector>
#include <list>
#include <fstream>
#include <iostream>
#include <boost/shared_ptr.hpp>
class PsrthymeProfile {
   private:
	  uint64_t nbins;
	  const char* name;
	  double freq;
	  uint64_t imjd;
	  double fmjd; //seconds
   public:
	  std::vector<double> profile;
	  std::vector<double> phase;
	  typedef boost::shared_ptr<PsrthymeProfile> Ptr;
	  PsrthymeProfile(const char* name) {
		 this->name=name;
	  } 
	  virtual bool read(std::istream &in);
	  bool read();
	  uint64_t getNbins(){
		 return this->nbins;
	  }
};
#endif

bool PsrthymeProfile::read(std::istream &in){
   std::string line;
   this->freq=0;
   this->imjd=0;
   this->fmjd=0;
   while (std::getline(in, line)) {
	  try {
		 double x = boost::lexical_cast<double>(line); // double could be anything with >> operator.
		 this->profile.push_back(x);
	  } catch (...){
		 continue;
	  }
   }
   this->nbins = profile.size();
   for(uint64_t ibin=0; ibin<nbins; ibin++){
	  double iphase = double(ibin)/double(nbins);
	  if (iphase > 0.5)iphase-=1.0;
	  this->phase.push_back(iphase);
   }
   if(this->profile.size() < 4){
	  this->profile.clear();
	  this->phase.clear();
	  return false;
   } else return true;
}


bool PsrthymeProfile::read(){
   std::ifstream in(this->name);
   return this->read(in);
   in.close();
}

