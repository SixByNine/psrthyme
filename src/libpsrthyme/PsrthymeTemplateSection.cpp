//  Copyright (C) 2014 Michael J. Keith, University of Manchester
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <inttypes.h>
#include <boost/foreach.hpp>


// include header generated by makeheaders
#include "PsrthymeTemplateSection.hpp"

#if INTERFACE
#include <boost/shared_ptr.hpp>
#include <iostream>
#include <vector>
class PsrthymeTemplateSection : public PsrthymeComponent{
   private:
	  std::vector<PsrthymeComponent::Ptr> components;
	  std::string name;
   public:
	  typedef boost::shared_ptr<PsrthymeTemplateSection> Ptr;
	  PsrthymeTemplateSection(std::string name); // constructor
	  double getValue(double phase) const ;
	  double getValue(double p0, double p1) const ;
	  void addComponent(PsrthymeComponent::Ptr comp){
		 this->components.push_back(comp);
	  }
	  std::string getName(){
		 return this->name;
	  }
	  uint64_t nprof(){
		return this->components.size();
	  }
	  void write(std::ostream &out);
}

#endif

PsrthymeTemplateSection::PsrthymeTemplateSection(std::string name) {
   this->name = name;
}

double PsrthymeTemplateSection::getValue(double phase) const {
   double val=0;
   BOOST_FOREACH (PsrthymeComponent::Ptr comp, this->components){
	  val += comp->getValue(phase);
   }
   return val;
}

double PsrthymeTemplateSection::getValue(double p0, double p1) const {
   double val=0;
   BOOST_FOREACH (PsrthymeComponent::Ptr comp, this->components){
	  val += comp->getValue(p0,p1);
   }
   return val;
}


void PsrthymeTemplateSection::write(std::ostream &out){
   out << "\tPROFILE \t" << this->getName() << std::endl;
   for(uint64_t i=0; i<this->components.size(); i++){
	  this->components[i]->write(out);
   }
   out << "\t# END   \t" << this->getName() << std::endl;
}
