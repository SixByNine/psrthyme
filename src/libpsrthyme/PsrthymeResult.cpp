//  Copyright (C) 2014 Michael J. Keith, University of Manchester
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <inttypes.h>
#include <TKlog.h>

// include header generated by makeheaders
#include "PsrthymeResult.hpp"

#if INTERFACE
#include <vector>
#include <list>
#include <boost/shared_ptr.hpp>
class PsrthymeResult {
   public:
	  typedef boost::shared_ptr<PsrthymeResult> Ptr;
	  SparseList::Ptr chisq_space;
	  PsrthymeTemplate::Ptr tmpl;
	  PsrthymeProfile::Ptr obsn;
	  std::vector<double> amp_values;
	  std::vector<double> amp_errors;
	  std::vector<double> data_cov;
	  std::vector<double> chisq_fit_x;
	  std::vector<double> chisq_fit_y;
	  PsrthymeMatrix::Ptr amp_cvm;
	  uint64_t nfree;
	  uint64_t nfit;
	  double phase;
	  double error;
	  double chisq;
	  PsrthymeResult() {
	  };
	  std::vector<double> best_profile;
	  std::vector<double> residual;
	  void chisqZoom(double cntr, double hwidth, std::vector<double> &x, std::vector<double> &y);
	  void chisqZoomY(double maxval, std::vector<double> &x, std::vector<double> &y);
	  void reduceChisq(std::vector<double> &c){
		 for (uint64_t i=0; i < c.size(); i++){
			c[i] /= double(this->nfree);
		 }
	  }
	  static double correctPhase(double p){
		 while (p <= -0.5)p+=1.0;
		 while (p  >  0.5)p-=1.0;
		 return p;
	  }
};
#endif


void PsrthymeResult::chisqZoomY(double maxval, std::vector<double> &x, std::vector<double> &y){
   std::vector<double> full_x;
   std::vector<double> full_y;
   this->chisq_space->toArray(full_x,full_y,this->phase);
   for (uint64_t i = 0; i < full_x.size(); i++){
	  if ( full_y[i] < maxval){
		 x.push_back(full_x[i]);
		 y.push_back(full_y[i]);
	  }
   }
}
void PsrthymeResult::chisqZoom(double cntr, double hwidth, std::vector<double> &x, std::vector<double> &y){
   std::vector<double> full_x;
   std::vector<double> full_y;
   this->chisq_space->toArray(full_x,full_y,cntr);
   for (uint64_t i = 0; i < full_x.size(); i++){
	  double phase = PsrthymeResult::correctPhase(full_x[i] - cntr);
	  if ( fabs(phase) < hwidth ){
		 x.push_back(phase);
		 y.push_back(full_y[i]);
	  }
   }
}
