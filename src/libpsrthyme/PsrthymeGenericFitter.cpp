//  Copyright (C) 2014 Michael J. Keith, University of Manchester
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <inttypes.h>
#include <limits>
#include <map>
#include <boost/foreach.hpp>

// include header generated by makeheaders
#include "PsrthymeFitter.hpp"
#define TIMEIT 1

#if INTERFACE
#include <list>
#include <boost/shared_ptr.hpp>

class PsrthymeGenericFitter {
   private:
   protected:
	  struct Iteration{
		 uint64_t resolution;
		 bool cholesky;
		 bool zoom;
		 bool matched_filter;
		 Iteration(uint64_t resolution, bool cholesky, bool zoom){
			this->resolution = resolution;
			this->cholesky = cholesky;
			this->zoom = zoom;
			this->matched_filter=true;
		 }
	  };
	  PsrthymeTemplate::Ptr tmpl;
	  std::list<Iteration> iterations;
   public:

	  typedef boost::shared_ptr<PsrthymeGenericFitter> Ptr;
	  void setTemplate(PsrthymeTemplate::Ptr tmpl){
		 this->tmpl = tmpl;
	  }
	  virtual PsrthymeResult::Ptr fitTo(PsrthymeProfile::Ptr obs)=0;
	  std::vector<double> getCovarianceFunction (const std::vector<double> &profile);
};

#endif

std::vector<double> PsrthymeGenericFitter::getCovarianceFunction (const std::vector<double> &profile){
   uint64_t i,j;
   const uint64_t nbins = profile.size();
   std::vector<double> cov(profile);
   double mean=0;
   for(i = 0; i < nbins; i++){
	  mean+=profile[i];
	  cov[i]=0;
   }
   mean /= double(nbins);
   for(j = 0; j < nbins; j++){
	  for(i = 0; i < nbins; i++){
		 cov[j] += (profile[i]-mean)*(profile[(i+j)%nbins]-mean);
	  }
   }
   for(i = 0; i < nbins; i++){
	  cov[i] /= double(nbins);
   }

   return cov;
}


