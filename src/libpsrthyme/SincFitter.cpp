//  Copyright (C) 2014 Michael J. Keith, University of Manchester
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <TKlog.h>

// include header generated by makeheaders
#include "SincFitter.hpp"

#if EXPORT_INTERFACE
#include <boost/shared_ptr.hpp>
#include <vector>
#include <inttypes.h>
#include <math.h>

class SincFitter : public LevMar {
   private:
	  std::vector<double> data;
   protected:
   public:
	  std::vector<double> fitTo(std::vector<double> data);

	  bool hasJacobian(){
		 return false;
	  }
	  std::vector<double> evaluate(const std::vector<double> &p){
		 int size=this->data.size();
		 std::vector<double> out(size,0);
		 for (uint32_t i =0 ; i < size/2; i++){
			double x = (double)i/p[1];
			if (x==0){
			   out[i] = (p[0]);
			} else {
			   out[i] = pow(p[0]*sin(x)/x,2);
			   out[size-i] = out[i];
			}
		 }
		 return out;
	  }
	  std::vector<double> jacobian(const std::vector<double> &p){
		 std::vector<double> ret(0);
		 return ret;
	  }
};

#endif

std::vector<double> SincFitter::fitTo(std::vector<double> data){
   this->data.swap(data);
   std::vector<double> params;
   params.push_back(1);
   params.push_back(8);
   LevMar::doFit(params,this->data);
   return this->evaluate(params);
}
