//  Copyright (C) 2014 Michael J. Keith, University of Manchester
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <inttypes.h>
#include <cmath>

// include header generated by makeheaders
#include "ExpModGaussComponent.hpp"

#if INTERFACE
#include <boost/shared_ptr.hpp>
class ExpModGaussComponent : public PsrthymeComponent{
   private:
	  double amp;
	  double mu;
	  double sigma;
	  double lambda;
	  double delta_phase;
   public:
	  double getValue(double phase) const {
		 double l2 = this->lambda/2.0;
		 double l = this->lambda;
		 return this->amp * l2 * 
			exp( l2 * (2.0 * this->mu + l * this->sigma * this->sigma - 2 * phase))
			* (1.0 - erf(phase));
	  }

	  double getValue(double p0, double p1) const{
		 double ret = this->getValue(p0);
		 uint_fast32_t n=1;
		 for (double p = p0+this->delta_phase; p < p1; p++){
			ret+=this->getValue(p);
			n++;
		 }	
		 return ret/double(n);
	  }
	  void write(std::ostream &out){
		 out << "\t\tEXGAUSS " << this->mu << "\t" << this->sigma << "\t" << this->lambda << "\t" << this->amp << std::endl;
	  }
	  ExpModGaussComponent(double amp, double mu, double sigma, double lambda){
		 this->amp =amp;
		 this->mu = mu;
		 this->sigma=sigma;
		 this->lambda=lambda;
		 this->delta_phase=1.0/4096;
	  }
	  typedef boost::shared_ptr<ExpModGaussComponent>  Ptr;
};

#endif
