//  Copyright (C) 2014 Michael J. Keith, University of Manchester
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <inttypes.h>
#include <cmath>

// include header generated by makeheaders
#include "ExpModGaussComponent.hpp"

#if INTERFACE
#include <boost/shared_ptr.hpp>
#include <TKlog.h>
class ExpModGaussComponent : public PsrthymeComponent{
   private:
	  double amp;
	  double mu;
	  double sigma;
	  double lambda;
	  double delta_phase;
   public:
	  double getValue(double phase) const {
		 double mean = this->mu + 1.0/this->lambda;
		 double x = phase - this->mu;
		 while (x < mean-0.5)x+=1.0;
		 while (x > mean+0.5)x-=1.0;
		 double l2 = this->lambda/2.0;
		 double l = this->lambda;
		 double s = this->sigma;
		 double ss= s*s;
		 double y = (l*ss - x) / sqrt(2.0) / s;
		 double z = l2 * (l*ss - 2.0*x);
		 double ret = this->amp*l2*exp(z) * (1.0 - erf(y));
		 logmsg("%lf %lf %lf %lf : %lg : %lg %lg : %lf %lf",phase,x,y,z,ret,exp(z),1-erf(y),s,l);
		 return ret;
	  }

	  double getValue(double p0, double p1) const{
		 double ret = this->getValue(p0);
		 uint_fast32_t n=1;
		 for (double p = p0+this->delta_phase; p < p1; p++){
			ret+=this->getValue(p);
			n++;
		 }	
		 return ret/double(n);
	  }
	  void write(std::ostream &out){
		 out << "\t\tEXGAUSS " << this->mu << "\t" << this->sigma << "\t" << this->lambda << "\t" << this->amp << std::endl;
	  }
	  ExpModGaussComponent(double mu, double sigma, double lambda, double amp){
		 this->amp =amp;
		 this->mu = mu;
		 this->sigma=sigma;
		 this->lambda=lambda;
		 this->delta_phase=1.0/4096;
	  }
	  typedef boost::shared_ptr<ExpModGaussComponent>  Ptr;
};

#endif
