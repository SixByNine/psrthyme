//  Copyright (C) 2014 Michael J. Keith, University of Manchester
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <inttypes.h>
#include <fstream>
#include <cstdlib>
#include <TKlog.h>
#include <boost/algorithm/string/split.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/foreach.hpp>

// include header generated by makeheaders
#include "PsrthymeTelescope.hpp"
#include "glob.cpp"

#define TEMPO2_ENV "TEMPO2"

#if INTERFACE
#include <boost/shared_ptr.hpp>
#include <boost/algorithm/string/trim.hpp>
#include <vector>
#include <string>
#include <map>
class PsrthymeTelescope {
   public:
	  typedef boost::shared_ptr<PsrthymeTelescope> Ptr;
   private:
	  static Ptr unknown_telescope;
	  static std::map<std::string,Ptr> id2scope;
	  PsrthymeTelescope(){
	  }
   public:
	  static void setup();
	  std::string name;
	  std::vector<std::string> id;
	  std::string getCode(){
		 if (id.size() > 0)return id[0];
		 else return "UNKNOWN";
	  }
	  double x,y,z;
	  static Ptr getTelescopeFromId(std::string id){
		 boost::trim(id);
		 if (id2scope.count(id) > 0){
			return id2scope[id];
		 } else {
			return unknown_telescope;
		 }
	  }
};
#endif

// initialise these when library is loaded
std::map<std::string,PsrthymeTelescope::Ptr> PsrthymeTelescope::id2scope;
PsrthymeTelescope::Ptr PsrthymeTelescope::unknown_telescope = PsrthymeTelescope::Ptr(new PsrthymeTelescope());

void PsrthymeTelescope::setup(){
   const char * t2env=getenv(TEMPO2_ENV);
   if (t2env==NULL){
	  logerr("Tempo2 environment variable not set, cannot convert telescope codes");
	  return;
   }
   std::string t2dir = t2env;
   std::vector<std::string> files = glob((t2dir +"/observatory/*.dat"));

   BOOST_FOREACH(std::string file, files){
	  std::ifstream obsdat(file.c_str());
	  std::string line;
	  while (std::getline(obsdat, line)) {
		 boost::trim(line);
		 if (line[0]=='#')continue;
		 std::vector<std::string> elems;
		 boost::split(elems,line,boost::is_any_of(" \t"),boost::token_compress_on);
		 if (elems.size() < 5) continue;
		 try {
			PsrthymeTelescope::Ptr tel = PsrthymeTelescope::Ptr(new PsrthymeTelescope());
			tel->x = boost::lexical_cast<double>(elems[0]);
			tel->y = boost::lexical_cast<double>(elems[1]);
			tel->z = boost::lexical_cast<double>(elems[2]);
			tel->id.push_back(elems[3]);
			tel->id.push_back(elems[4]);
			tel->name = elems[3];
			BOOST_FOREACH (std::string id, tel->id){
			   PsrthymeTelescope::id2scope[id]=tel;
			}
		 } catch (...){
			continue;
		 }
	  }

	  obsdat.close();
   }

   std::string file = ((t2dir +"/observatory/aliases"));
std::ifstream obsdat(file.c_str());
	  std::string line;
	  while (std::getline(obsdat, line)) {
		 boost::trim(line);
		 if (line[0]=='#')continue;
		 std::vector<std::string> elems;
		 boost::split(elems,line,boost::is_any_of(" \t"),boost::token_compress_on);
		 if (elems.size() < 2) continue;
		 if(PsrthymeTelescope::id2scope.count(elems[0])>0){
			PsrthymeTelescope::Ptr tel = id2scope[elems[0]];
			elems.erase(elems.begin());
			BOOST_FOREACH (std::string id, elems){
			   tel->id.push_back(id);
			   PsrthymeTelescope::id2scope[id]=tel;
			}
		 }
	  }

	  obsdat.close();


}
