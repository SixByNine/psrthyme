//  Copyright (C) 2014 Michael J. Keith, University of Manchester
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <inttypes.h>
#include <fstream>
#include <cstdlib>
#include <TKlog.h>
#include <boost/algorithm/string/trim.hpp>

// include header generated by makeheaders
#include "PsrthymeTelescope.hpp"

#define TEMPO2_ENV "TEMPO2"

#if INTERFACE
#include <boost/shared_ptr.hpp>
#include <string>
class PsrthymeTelescope {
   private:
	  void init(){
		 this->name="UNKNOWN";
		 this->tempo2_code="unk";
		 this->tempo_code='?';
		 this->x=0;
		 this->y=0;
		 this->z=0;
	  }
	  static map<std::string,PsrthymeTelescope> t2scopes;
	  static map<std::string,PsrthymeTelescope> t1scopes;
   public:
	  typedef boost::shared_ptr<PsrthymeTelescope> Ptr;
	  std::string name;
	  std::string tempo2_code;
	  char tempo_code;
	  double x,y,z;
	  PsrthymeTelescope(){
		 this->init();
	  }
	  PsrthymeTelescope(std::string &tempo2_code);
};
#endif


PsrthymeTelescope::PsrthymeTelescope(std::string &tempo2_code){
   PsrthymeTelescope::setupMap();
}

PsrthymeTelescope::setupMap(){
   const char * t2env=getenv(TEMPO2_ENV);
   if (t2env==NULL){
	  logerr("Tempo2 environment variable not set, cannot convert telescope codes");
	  this->init();
	  return;
   }
   std::string t2dir = t2env;

   std::ifstream obsdat((t2dir +"/observatory/observatories.dat").c_str());
   std::string line;
   while (std::getline(obsdat, line)) {
	  boost::trim(line);
	  if(line[0]=='#')continue;
	  try {
		 double x = boost::lexical_cast<double>(line); // double could be anything with >> operator.
		 this->profile.push_back(x);
	  } catch (...){
		 continue;
	  }
   }
   obsdat.close();

}
